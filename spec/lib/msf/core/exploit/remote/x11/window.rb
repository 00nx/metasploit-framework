# -*- coding: binary -*-

require 'spec_helper'

RSpec.describe Msf::Exploit::Remote::X11::Window do
  subject do
    mod = ::Msf::Exploit.new
    mod.extend described_class

    mod.send(:initialize)
    mod
  end

  let(:get_window_attributes) do
    "\x03\x03\x02\x00\x28\x05\x00\x00"
  end

  let(:get_geometry) do
    "\x0e\x04\x02\x00\x28\x05\x00\x00"
  end

  let(:translate_request) do
    "\x28\x03\x04\x00\x28\x05\x00\x00\x28\x05\x00\x00\x00\x00\x00\x00"
  end

  let(:querytree_request) do
    "\x0f\x01\x02\x00\x28\x05\x00\x00"
  end

  let(:querytree_response) do
    "\x01\x00\x10\x00\x48\x00\x00\x00\x28\x05\x00\x00\x00\x00\x00\x00" \
    "\x48\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x10\x00\x40\x00\x08\x00\x20\x00\x01\x00\x40\x00\x06\x00\x40\x00" \
    "\x07\x00\x40\x00\x08\x00\x40\x00\x0e\x00\x40\x00\x0f\x00\x40\x00" \
    "\x11\x00\x40\x00\x01\x00\xc0\x00\x01\x00\xa0\x00\x01\x00\x80\x00" \
    "\x01\x00\x60\x01\x01\x00\xe0\x00\x01\x00\x40\x01\x01\x00\x20\x01" \
    "\x03\x00\x20\x01\x01\x00\x80\x01\x02\x00\x40\x01\x01\x00\xa0\x01" \
    "\x1a\x00\x40\x00\x02\x00\xc0\x01\x01\x00\xe0\x01\x01\x00\x60\x02" \
    "\x02\x00\x60\x02\x06\x00\x60\x02\x01\x00\x20\x02\x01\x00\xa0\x02" \
    "\x01\x00\xe0\x02\x05\x05\x40\x00\x0c\x00\x20\x02\x35\x0b\x40\x00" \
    "\xd6\x0c\x40\x00\xf6\x1a\x40\x00\x03\x1c\x40\x00\x70\x1f\x40\x00" \
    "\xda\x29\x40\x00\xc4\x2a\x40\x00\xcc\x39\x40\x00\xb3\x3a\x40\x00" \
    "\x35\x3c\x40\x00\x7c\x3f\x40\x00\x03\x40\x40\x00\x89\x40\x40\x00" \
    "\xb6\x42\x40\x00\xc3\x43\x40\x00\x1a\x48\x40\x00\x64\x4a\x40\x00" \
    "\x05\x4d\x40\x00\xc9\x4d\x40\x00\xcb\x4d\x40\x00\xcd\x4d\x40\x00" \
    "\xa5\x58\x40\x00\xe7\x5a\x40\x00\x96\x63\x40\x00\x04\x00\x00\x01" \
    "\x01\x00\x40\x02\x08\x00\x00\x01\x14\x00\x00\x01\x28\x00\x00\x01" \
    "\xa0\x00\x00\x01\xae\x6a\x40\x00\xc9\x6c\x40\x00\xf5\x02\x00\x01" \
    "\x99\x03\x00\x01\x5c\x6d\x40\x00\x01\x00\x80\x02\x03\x00\x80\x02" \
    "\x0a\x00\x60\x02\x13\x69\x40\x00\x08\x00\x80\x02\x0a\x00\x40\x00"
  end

  let(:windowattributes_response) do
    "\x01\x00\x11\x00\x03\x00\x00\x00\x21\x00\x00\x00\x02\x00\x00\x01" \
    "\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x02\x01\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
  end

  let(:getgeometry_response) do
    "\x01\x00\x12\x00\x00\x00\x00\x00\x28\x05\x00\x00\x00\x00\x00\x00" \
    "\xbe\x03\x40\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
  end

  describe 'creates GET requests for different functions' do
    it do
      # test against packet pulled from wireshark
      request = Msf::Exploit::Remote::X11::Window::GETREQUEST.read(get_window_attributes)
      expect(request.opcode).to eq(3)
      expect(request.request_length).to eq(2)
      expect(request.window).to eq(1320)

      request = Msf::Exploit::Remote::X11::Window::GETREQUEST.new(
        window: 1320,
        opcode: 3,
        unused: 3
      )
      expect(request.to_binary_s).to eq(get_window_attributes)

      request = Msf::Exploit::Remote::X11::Window::GETREQUEST.read(get_geometry)
      expect(request.opcode).to eq(14)
      expect(request.request_length).to eq(2)
      expect(request.window).to eq(1320)

      request = Msf::Exploit::Remote::X11::Window::GETREQUEST.new(
        window: 1320,
        opcode: 14,
        unused: 4
      )
      expect(request.to_binary_s).to eq(get_geometry)
    end
  end

  describe 'creates TranslateCoordinates request' do
    it do
      # test against packet pulled from wireshark
      request = Msf::Exploit::Remote::X11::Window::TRANSLATECOORDINATESREQUEST.read(translate_request)
      expect(request.opcode).to eq(40)
      expect(request.request_length).to eq(4)
      expect(request.src_window).to eq(1320)
      expect(request.dst_window).to eq(1320)
      expect(request.src_x).to eq(0)
      expect(request.src_y).to eq(0)

      request = Msf::Exploit::Remote::X11::Window::TRANSLATECOORDINATESREQUEST.new(
        src_window: 1320,
        dst_window: 1320,
        opcode: 40,
        unused: 3
      )
      expect(request.to_binary_s).to eq(translate_request)
    end
  end

  describe 'creates QueryTree request' do
    it do
      # test against packet pulled from wireshark
      request = Msf::Exploit::Remote::X11::Window::QUERYTREEREQUEST.read(querytree_request)
      expect(request.opcode).to eq(15)
      expect(request.request_length).to eq(2)

      request = Msf::Exploit::Remote::X11::Window::QUERYTREEREQUEST.new(
        drawable: 1320
      )
      expect(request.to_binary_s).to eq(querytree_request)
    end
  end

  describe 'handles QueryTree response' do
    it do
      # test against packet pulled from wireshark
      response = Msf::Exploit::Remote::X11::Window::QUERYTREERESPONSE.read(querytree_response)
      puts response
      expect(response.n_children).to eq(16)
      expect(response.root).to eq(1)
      expect(response.parent_id).to eq(0)
      expect(response.tree.length).to eq(252)
    end
  end

  describe 'handles GetWindowAttributes response' do
    it do
      # test against packet pulled from wireshark
      response = Msf::Exploit::Remote::X11::Window::GETWINDOWATTRIBUTESRESPONSE.read(windowattributes_response)
      expect(response.depth).to eq(1)
      expect(response.visual_id).to eq(4352)
      expect(response.class_name).to eq(0)
      expect(response.backing_planes).to eq(2162688)
      expect(response.backing_pixel).to eq(131072)
    end
  end

  describe 'handles GetGeometry response' do
    it do
      # test against packet pulled from wireshark
      response = Msf::Exploit::Remote::X11::Window::GETGEOMETRYRESPONSE.read(getgeometry_response)
      expect(response.depth).to eq(1)
      expect(response.root).to eq(4608)
      expect(response.x).to eq(0)
      expect(response.y).to eq(10240)
      expect(response.width).to eq(5)
      expect(response.height).to eq(0)
      expect(response.border_width).to eq(0)
    end
  end

end
