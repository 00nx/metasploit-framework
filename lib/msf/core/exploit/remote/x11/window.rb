# -*- coding: binary -*-

#
# This mixin is a simplistic implementation of X11 extensions protocol
#
# Wireshark dissector: https://wiki.wireshark.org/X11
#

module Msf::Exploit::Remote::X11::Window
  # 3 =  https://xcb.freedesktop.org/manual/structxcb__get__window__attributes__request__t.html
  # 14 = https://xcb.freedesktop.org/manual/structxcb__get__geometry__request__t.html
  class GETREQUEST < BinData::Record
    endian :little
    uint8 :opcode # 3 = GetWindowAttributes, 14 = GetGeometry
    uint8 :unused # XXX seems to be increasing counter...
    uint16 :request_length, value: -> { num_bytes / 4 }
    uint32 :window # X11CONNECTION.screen_root
  end

  # https://xcb.freedesktop.org/manual/structxcb__get__window__attributes__reply__t.html
  class GETWINDOWATTRIBUTESRESPONSE < BinData::Record
    endian :little
    uint8 :depth
    uint16 :visual_id
    uint8 :class_name
    uint8 :bit_gravity
    uint8 :win_gravity
    uint32 :backing_planes
    uint32 :backing_pixel
    uint8 :save_under
    uint8 :map_is_installed
    uint8 :map_state
    uint8 :override_redirect
    uint32 :colormap
    uint32 :all_event_masks
    uint32 :your_event_mask
    uint16 :do_not_propagate_mask
  end

  # https://xcb.freedesktop.org/manual/structxcb__get__geometry__reply__t.html
  class GETGEOMETRYRESPONSE < BinData::Record
    endian :little
    uint8 :depth
    uint32 :root
    uint16 :x
    uint16 :y
    uint16 :width
    uint16 :height
    uint16 :border_width
  end

  # https://xcb.freedesktop.org/manual/structxcb__get__geometry__reply__t.html
  class WINDOWATTRIBUTESGETGEOMETRYRESPONSE < BinData::Record
    endian :little
    uint8 :reply
    uint8 :depth
    uint16 :sequence_number
    uint32 :reply_length
    uint32 :root
    uint16 :x
    uint16 :y
    uint16 :width
    uint16 :height
    uint16 :border_width
  end

  # https://xcb.freedesktop.org/manual/structxcb__translate__coordinates__request__t.html
  class TRANSLATECOORDINATESREQUEST < BinData::Record
    endian :little
    uint8 :opcode, value: 40 # TranslateCoordinates
    uint8 :unused # XXX seems to be increasing counter...
    uint16 :request_length, value: -> { num_bytes / 4 }
    uint32 :src_window # X11CONNECTION.screen_root
    uint32 :dst_window # X11CONNECTION.screen_root
    uint16 :src_x
    uint16 :src_y
  end

  # https://xcb.freedesktop.org/manual/structxcb__query__tree__request__t.html
  class QUERYTREEREQUEST < BinData::Record
    endian :little
    uint8 :opcode, value: 15 # QueryTree
    uint8 :unused, initial_value: 1 # XXX counter?
    uint16 :request_length, value: -> { num_bytes / 4 }
    uint32 :drawable # X11CONNECTION.screen_root
  end

  # https://xcb.freedesktop.org/manual/structxcb__query__tree__reply__t.html
  class QUERYTREERESPONSE < BinData::Record
    endian :little
    uint8 :reply
    uint8 :unused
    uint16 :sequence_number
    uint32 :reply_length
    uint32 :root_window
    uint32 :parent_window
    uint32 :children_len
    uint32 :unsure
    uint32 :unsure1
    uint32 :unsure2
    array :children,
          type: :uint32,
          initial_length: :children_len
  end

  # https://xcb.freedesktop.org/manual/structxcb__get__image__request__t.html
  class GETIMAGEREQUEST < BinData::Record
    endian :little
    uint8 :opcode, value: 73 # GetImage
    uint8 :image_pixmap_format, initial_value: 2 # zpixmap, better than 0 xypixmap
    uint16 :request_length, value: -> { num_bytes / 4 }
    uint32 :drawable # window/X11CONNECTION.screen_root
    uint16 :x
    uint16 :y
    uint16 :width
    uint16 :height
    uint32 :plane_mask, initial_value: 4294967295 # AllPlanes \xff\xff\xff\xff
  end

  # https://xcb.freedesktop.org/manual/structxcb__get__image__reply__t.html
  class GETIMAGERESPONSE < BinData::Record
    endian :little
    uint8 :response_type
    uint8 :depth
    uint16 :sequence_number
    uint32 :reply_length
    uint32 :visual_id
    array :image_data,
          type: :uint8,
          initial_length: :reply_length
  end

  # https://xcb.freedesktop.org/manual/structxcb__query__colors__request__t.html
  class GETCOLORSREQUEST < BinData::Record
    endian :little
    uint8 :opcode, value: 91 # QueryColors
    uint8 :unused
    uint16 :request_length, value: -> { num_bytes / 4 }
    uint32 :color_map
    array :pixels,
          type: :uint32, # this is likely 00 RR GG BB (uint8 for each)
          read_until: :eof
  end

  class COLOR < BinData::Record
    endian :little
    uint16 :pixel
    uint16 :red
    uint16 :green
    uint16 :blue
  end

  # https://xcb.freedesktop.org/manual/structxcb__query__colors__reply__t.html
  class GETCOLORSRESPONSE < BinData::Record
    endian :little
    uint8 :response_type
    uint8 :unused
    uint16 :sequence
    uint32 	:reply_length
    uint16 	:colors_len
    array :colors,
          initial_length: :colors_len,
          type: :COLOR
  end

  # https://xcb.freedesktop.org/manual/structxcb__get__window__attributes__reply__t.html
  class GETWINDOWRESPONSE < BinData::Record
    endian :little
    uint8 :response_type
    uint8 :backing_store
    uint16 :sequence_number
    uint32 :reply_length
    uint32 :visual_id
    uint16 :window_class
    bit8 :bit_gravity
    bit8 :win_gravity
    bit32 :backing_planes
    bit32 :backing_pixel
    bit8 :save_under
    bit8 :map_is_installed
    bit8 :map_state
    bit8 :override_redirect
    uint32 :colormap
    uint32 :all_event_masks
    uint32 :your_event_mask
    uint16 :do_not_propagate_mask
    array :pad,
          type: :uint8,
          initial_length: 2
  end
end

class X11Image
  def initialize(width, height, image_reply, color_reply)
    @width = width
    @height = height
    @image_reply = image_reply
    @color_reply = color_reply
  end

  def create_image
    # Extract relevant data from @image_reply and @color_reply
    width = @width
    height = @height
    pixel_data = @image_reply.image_data
    colors = @color_reply.colors

    # Create an image object
    image = ChunkyPNG::Image.new(width, height, ChunkyPNG::Color::TRANSPARENT)

    # Populate image with pixel data and colors
    pixel_data.each_with_index do |pixel, i|
      color = colors[pixel]
      # Set pixel color in the image
      image[i % width, i / width] = ChunkyPNG::Color.rgb(color.red, color.green, color.blue)
    end

    image
  end
end
