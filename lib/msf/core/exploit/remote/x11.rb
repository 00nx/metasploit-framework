# -*- coding: binary -*-

#
# This mixin is a simplistic implementation of X11
#
# Wireshark dissector: https://wiki.wireshark.org/X11
#

module Msf::Exploit::Remote::X11
  include Msf::Exploit::Remote::X11::Connect
  include Msf::Exploit::Remote::X11::Extensions
  include Msf::Exploit::Remote::X11::Xkeyboard

  class X11GETPROPERTYRESPONSE < BinData::Record
    endian :little
    uint8 :reply
    uint8 :format
    uint16 :sequence_number # GetProperty
    uint32 :reply_length
    uint32 :get_property_type # 8bit boolean, \x01 == true \x00 == false
    uint32 :bytes_after
    uint32 :value_length
    uint32 :unused
    uint32 :unused1
    uint32 :unused2
    string :value_data, read_length: -> { value_length }
  end

  class X11GETPROPERTY < BinData::Record
    endian :little
    uint8 :opcode, value: 20 # GetProperty
    uint8 :delete_field, value: 0 # \x00 false, assuming \x01 true?
    uint16 :request_length, value: 6
    uint32 :window, value: 1320 # "\x28\x05\x00\x00", XXX is this from our connection?
    uint32 :property, value: 23 # "\x17\x00\x00\x00" RESOURCE_MANAGER
    uint32 :get_property_type, value: 31 # "\x1f\x00\x00\x00" # get-property-type (31 = string)
    uint32 :long_offset, value: 0 
    uint32 :content_length, value: 100_000_000 # "\x00\xe1\xf5\x05"
  end

end
