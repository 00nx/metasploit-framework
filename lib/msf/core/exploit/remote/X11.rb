# -*- coding: binary -*-

#
# This mixin is a simplistic implementation of X11
#
# Wireshark dissector: https://wiki.wireshark.org/X11
#

module Msf::Exploit::Remote::X11
    class X11Connection < BinData::Record
        endian :little
        uint8 :success
        uint8 :unused
        uint16 :protocol_version_major
        uint16 :protocol_version_minor
        uint16 :reply_length
        uint32 :release_number
        uint32 :resource_id_base
        uint32 :resource_id_mask
        uint32 :motion_buffer_size
        uint16 :vendor_length
        uint32 :maximum_request_length
        uint8 :number_of_screens_in_root
        uint8 :number_of_formats_in_pixmap_formats
        uint8 :image_byte_order
        uint8 :bitmap_format_bit_order
        uint8 :bitmap_format_scanline_unit
        uint8 :bitmap_format_scanline_pad
        uint8 :min_keycode
        uint8 :max_keycode
        uint32 :unused2
        string :vendor, read_length: :vendor_length
        # pixmap-format
        # uint8 :depth
        # uint8 :dbits_per_pixel
        # uint8 :scanline_pad
        # uint32 :unused3
        # uint8 :end
       
    end
   
    def process_initial_connection_response(packet)
        #print_packet(packet)
        success = packet[0]
        if success == "\x01"
            print_good("Successly established X11 connection")
        else
            fail_with(Msf::Module::Failure::UnexpectedReply, 'Failed to establish an X11 connection')
        end
        major_version = packet[2].unpack('C').first
        vprint_status("Major Version: #{major_version}")
        minor_version = packet[4].unpack('C').first
        vprint_status("Minor Version: #{minor_version}")
        vendor_str_len = packet[24].unpack('C').first
        vprint_status("Vendor: #{packet[40,vendor_str_len]}")
        screen_width = packet[136,2].unpack("S<").first
        screen_height = packet[138,2].unpack("S<").first
        vprint_status("Screen Resolution: #{screen_width}x#{screen_height}")
        resource_id = packet[12,4]
        vprint_status("Resource ID: #{resource_id.inspect}")
        resource_id
    end
end
