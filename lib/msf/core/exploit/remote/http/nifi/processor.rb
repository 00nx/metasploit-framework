# -*- coding: binary -*-

module Msf::Exploit::Remote::HTTP::Nifi::Processor
  # Start processor
  #
  # @param token [String] The bearer token from a valid login
  # @param processor [String] UUID of the processes
  def start_processor(token, processor)
    body = {
      'state' => 'RUNNING',
      'disconnectedNodeAcknowledged' => false,
      'revision' => {
        'clientId' => 'x',
        'version' => 0
      }
    }
    opts = {
      'method' => 'PUT',
      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'processors', processor, 'run-status'),
      'ctype' => 'application/json',
      'data' => body.to_json
    }
    opts['headers'] = { 'Authorization' => "Bearer #{token}" } if token
    response = send_request_cgi(opts)
    check_response("PUTting processor #{processor} configuration", response, 200)
  end

  # Stop processor
  #
  # @param token [String] The bearer token from a valid login
  # @param processor [String] UUID of the processes
  def stop_processor(token, processor)
    body = {
      'revision' => {
        'clientId' => 'x',
        'version' => 1
      },
      'state' => 'STOPPED'
    }
    opts = {
      'method' => 'PUT',
      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'processors', processor, 'run-status'),
      'ctype' => 'application/json',
      'data' => body.to_json
    }
    opts['headers'] = { 'Authorization' => "Bearer #{token}" } if token
    response = send_request_cgi(opts)
    check_response("PUTting processor #{processor} stop command", response, 200)

    # Stop may not have worked (but must be done first). Terminate threads now
    opts = {
      'method' => 'DELETE',
      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'processors', processor, 'threads')
    }
    opts['headers'] = { 'Authorization' => "Bearer #{token}" } if token
    response = send_request_cgi(opts)
    check_response("DELETEing processor #{processor} terminate threads command", response, 200)
  end

  # Delete a processor
  #
  # @param token [String] The bearer token from a valid login
  # @param processor [String] UUID of the processes
  # @param version [Int] The version number to delete
  def delete_processor(token, processor, version = 0)
    opts = {
      'method' => 'DELETE',
      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'processors', processor),
      'vars_get' => { 'version' => version }
    }
    opts['headers'] = { 'Authorization' => "Bearer #{token}" } if token
    response = send_request_cgi(opts)
    # if we tried to delete the old revision, go ahead and delete the newer one
    # arbitrary version limit of 20
    while response.code == 400 && response.body.include?('is not the most up-to-date revision') && version <= 20
      version += 1
      vprint_status("Found newer revision of #{processor}, attempting to delete version #{version}")
      opts['vars_get'] = { 'version' => version }
      response = send_request_cgi(opts)
    end

    check_response("DELETEting processor #{processor}", response, 200)
  end

  # Creates a processor in a process group
  #
  # @param token [String] The bearer token from a valid login
  # @param process_group [String] UUID of a processor group
  # @param type [String] What type of processor to create
  # @return [String] The UUID of the root process group
  def create_processor(token, process_group, type = 'org.apache.nifi.processors.standard.ExecuteProcess')
    body = {
      'component' => { 'type' => type },
      'revision' => { 'version' => 0 }
    }
    opts = {
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'process-groups', process_group, 'processors'),
      'ctype' => 'application/json',
      'data' => body.to_json
    }
    opts['headers'] = { 'Authorization' => "Bearer #{token}" } if token
    response = send_request_cgi(opts)
    check_response("POSTing new processor in process group #{process_group}", response, 201, 'id')
  end

  # Get a processor in a process group
  #
  # @param token [String] The bearer token from a valid login
  # @param processor [String] UUID of a processoror
  # @param field [String] the key from the JSON blob to return
  # @return [String] THe value from the specified field
  def get_processor(token, processor, field = 'id')
    opts = {
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'processors', processor)
    }
    opts['headers'] = { 'Authorization' => "Bearer #{token}" } if token
    response = send_request_cgi(opts)
    check_response("GETting processor #{processor}", response, 200, field)
  end
end
