# -*- coding: binary -*-

module Msf::Exploit::Remote::HTTP::Nifi::Dbconnectionpool
  # Stop DB Connection Pool
  #
  # @param token [String] The bearer token from a valid login
  # @param db_con_pool [String] UUID of the DBConnectionPool
  def stop_dbconnectionpool(token, db_con_pool)
    body = {
      'disconnectedNodeAcknowledged' => false,
      'state' => 'DISABLED',
      'uiOnly' => true,
      'revision' => {
        'clientId' => 'x',
        'version' => 0
      }
    }
    opts = {
      'method' => 'PUT',
      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'controller-services', db_con_pool, 'run-status'),
      'ctype' => 'application/json',
      'data' => body.to_json
    }
    opts['headers'] = { 'Authorization' => "Bearer #{token}" } if token
    response = send_request_cgi(opts)
    check_response("PUTting disable status for db connection pool #{db_con_pool}", response, 200)
  end

  # Delete DB Connection Pool
  #
  # @param token [String] The bearer token from a valid login
  # @param db_con_pool [String] UUID of the DBConnectionPool
  def delete_dbconnectionpool(token, db_con_pool)
    version = 0
    opts = {
      'method' => 'DELETE',
      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'controller-services', db_con_pool),
      'vars_get' => {
        'version' => version
      }
    }
    opts['headers'] = { 'Authorization' => "Bearer #{token}" } if token
    response = send_request_cgi(opts)
    while response.code == 400 && response.body.include?('is not the most up-to-date revision') && version <= 20
      version += 1
      vprint_status("Found newer revision of #{db_con_pool}, attempting to delete version #{version}")
      opts['vars_get'] = { 'version' => version }
      response = send_request_cgi(opts)
    end
    check_response("DELETing db connection pool #{db_con_pool}", response, 200)
  end

  # Start DB Connection Pool
  #
  # @param token [String] The bearer token from a valid login
  # @param db_con_pool [String] UUID of the DBConnectionPool
  def start_dbconpool(token, db_con_pool)
    body = {
      'disconnectedNodeAcknowledged' => false,
      'state' => 'ENABLED',
      'uiOnly' => true,
      'revision' => {
        'clientId' => 'x',
        'version' => 0
      }
    }
    opts = {
      'method' => 'PUT',
      'uri' => normalize_uri(target_uri.path, 'nifi-api', 'controller-services', db_con_pool, 'run-status'),
      'ctype' => 'application/json',
      'data' => body.to_json
    }
    opts['headers'] = { 'Authorization' => "Bearer #{token}" } if token
    response = send_request_cgi(opts)
    check_response("PUTting start status for db connection pool #{db_con_pool}", response, 200)
  end
end
